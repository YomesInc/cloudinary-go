package main

import (
	"bufio"
	"fmt"
	"github.com/cloudinary/cloudinary-go/transformation/resize"
	"text/template"
	"os"
	"reflect"
	"strings"
)

type definition struct {
	path string
	structEntity interface{}
	packageName string
	mixins []string
}

type mixinData struct {
	PackageName string
	StructName string
	Receiver string
}

var Definitions = []definition{
	{{ range .Definitions}}
	{path: "{{ .Path}}", structEntity: {{ .StructEntity}}{}, packageName: "{{ .PackageName}}"},
	{{ end }}
}

func main() {
	curDir, _ := os.Getwd()

	for _, d := range Definitions {
		baseType := reflect.TypeOf(d.structEntity)

		for i := 0; i < baseType.NumField(); i++ {
			if baseType.Field(i).Tag.Get("mixin") != "" {
				d.mixins = append(d.mixins, baseType.Field(i).Tag.Get("mixin"))
			}
		}

		if len(d.mixins) > 0 {
			for _, m := range d.mixins {
				t := template.Must(template.ParseFiles(fmt.Sprintf("%s/transformation/gen/%s.template", curDir, m)))

				mixinData := mixinData{
					d.packageName,
					baseType.Name(),
					strings.ToLower(baseType.Name())[0:1],
				}

				f, _ := os.Create(fmt.Sprintf("%s/%s/%s_%s.go", curDir, d.path, strings.ToLower(baseType.Name()), m))
				w := bufio.NewWriter(f)
				t.Execute(w, mixinData)
				w.Flush()
				f.Close()
			}
		}
	}
}